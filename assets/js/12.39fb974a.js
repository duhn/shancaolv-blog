(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{350:function(t,s,a){t.exports=a.p+"assets/img/dcda101051f28502bd5c4402b292e38d.8a50f237.png"},432:function(t,s,a){t.exports=a.p+"assets/img/89f74c631110cfbc83298ef27dcd6370.b5daa397.jpg"},433:function(t,s,a){t.exports=a.p+"assets/img/b32aa8b1f75611e0759e52f5915539ac.b32aa8b1.jpg"},434:function(t,s,a){t.exports=a.p+"assets/img/76e385f3df5a694cc4238c7b65acfe1b.379d5a35.jpg"},475:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"关键词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键词"}},[t._v("#")]),t._v(" 关键词")]),t._v(" "),s("p",[t._v("由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段")]),t._v(" "),s("p",[t._v("最左前缀原则  B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录")]),t._v(" "),s("p",[t._v("索引下推")]),t._v(" "),s("p",[t._v("alter table T engine=InnoDB")]),t._v(" "),s("h1",{attrs:{id:"_05-深入浅出索引-下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-深入浅出索引-下"}},[t._v("#")]),t._v(" 05_深入浅出索引（下）")]),t._v(" "),s("p",[t._v("在上一篇文章中，我和你介绍了 "),s("strong",[t._v("InnoDB")]),t._v(" 索引的数据结构模型，今天我们再继续聊聊跟 "),s("strong",[t._v("MySQL")]),t._v(" 索引有关的概念。")]),t._v(" "),s("p",[t._v("在开始这篇文章之前，我们先来看一下这个问题：")]),t._v(" "),s("p",[t._v("在下面这个表 T 中，如果我执行 "),s("strong",[t._v("select * from T where k between 3 and 5")]),t._v("，需要执行几次树的搜索操作，会扫描多少行？")]),t._v(" "),s("p",[t._v("下面是这个表的初始化语句。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" T "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nID "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nk "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \ns "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" T "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ee'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ff'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("700")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:a(350),alt:"img"}})]),t._v(" "),s("p",[t._v("图 1 "),s("strong",[t._v("InnoDB")]),t._v(" 的索引组织结构")]),t._v(" "),s("p",[t._v("现在，我们一起来看看这条 "),s("strong",[t._v("SQL")]),t._v(" 查询语句的执行流程：")]),t._v(" "),s("ol",[s("li",[t._v("在 "),s("strong",[t._v("k")]),t._v(" 索引树上找到 "),s("strong",[t._v("k=3")]),t._v(" 的记录，取得 "),s("strong",[t._v("ID = 300")]),t._v("；")]),t._v(" "),s("li",[t._v("再到 "),s("strong",[t._v("ID")]),t._v(" 索引树查到 "),s("strong",[t._v("ID=300")]),t._v(" 对应的 "),s("strong",[t._v("R3")]),t._v("；")]),t._v(" "),s("li",[t._v("在 "),s("strong",[t._v("k")]),t._v(" 索引树取下一个值 "),s("strong",[t._v("k=5")]),t._v("，取得 "),s("strong",[t._v("ID=500")]),t._v("；")]),t._v(" "),s("li",[t._v("再回到 "),s("strong",[t._v("ID")]),t._v(" 索引树查到 "),s("strong",[t._v("ID=500")]),t._v(" 对应的 "),s("strong",[t._v("R4")]),t._v("；")]),t._v(" "),s("li",[t._v("在 "),s("strong",[t._v("k")]),t._v(" 索引树取下一个值 "),s("strong",[t._v("k=6")]),t._v("，不满足条件，循环结束。")])]),t._v(" "),s("p",[t._v("在这个过程中，"),s("strong",[t._v("回到主键索引树搜索的过程，我们称为回表")]),t._v("。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。")]),t._v(" "),s("p",[t._v("在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？")]),t._v(" "),s("h2",{attrs:{id:"覆盖索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[t._v("#")]),t._v(" 覆盖索引")]),t._v(" "),s("p",[t._v("如果执行的语句是 "),s("strong",[t._v("select ID from T where k between 3 and 5")]),t._v("，这时只需要查 "),s("strong",[t._v("ID")]),t._v(" 的值，而 "),s("strong",[t._v("ID")]),t._v(" 的值已经在 "),s("strong",[t._v("k")]),t._v(" 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 "),s("strong",[t._v("k")]),t._v(" 已经“覆盖了”我们的查询需求，我们称为覆盖索引。")]),t._v(" "),s("p",[s("strong",[t._v("由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。")])]),t._v(" "),s("p",[t._v("需要注意的是，在引擎内部使用覆盖索引在索引 "),s("strong",[t._v("k")]),t._v(" 上其实读了三个记录，"),s("strong",[t._v("R3~R5")]),t._v("（对应的索引 k 上的记录项），但是对于 "),s("strong",[t._v("MySQL")]),t._v(" 的 "),s("strong",[t._v("Server")]),t._v(" 层来说，它就是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。")]),t._v(" "),s("blockquote",[s("p",[t._v("备注：关于如何查看扫描行数的问题，我将会在第 16 文章《如何正确地显示随机消息？》中，和你详细讨论。")])]),t._v(" "),s("p",[t._v("基于上面覆盖索引的说明，我们来讨论一个问题："),s("strong",[t._v("在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？")])]),t._v(" "),s("p",[t._v("假设这个市民表的定义是这样的：")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("CREATE TABLE `tuser` "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  `id` int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NOT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  `id_card` varchar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" DEFAULT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  `name` varchar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" DEFAULT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  `age` int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" DEFAULT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  `ismale` tinyint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" DEFAULT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  PRIMARY KEY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("`id`"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  KEY `id_card` "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("`id_card`"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  KEY `name_age` "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("`name`"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("`age`"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ENGINE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("InnoDB\n")])])]),s("p",[t._v("我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？")]),t._v(" "),s("p",[t._v("如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。")]),t._v(" "),s("p",[t._v("当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这正是业务 DBA，或者称为业务数据架构师的工作。")]),t._v(" "),s("h2",{attrs:{id:"最左前缀原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀原则"}},[t._v("#")]),t._v(" 最左前缀原则")]),t._v(" "),s("p",[t._v("看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该怎么做呢？")]),t._v(" "),s("p",[t._v("这里，我先和你说结论吧。"),s("strong",[t._v("B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。")])]),t._v(" "),s("p",[t._v("为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(432),alt:"img"}})]),t._v(" "),s("p",[t._v("图 2 （name，age）索引示意图")]),t._v(" "),s("p",[t._v("可以看到，索引项是按照索引定义里面出现的字段顺序排序的。")]),t._v(" "),s("p",[t._v("当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。")]),t._v(" "),s("p",[t._v('如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是"where name like ‘张 %’"。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。')]),t._v(" "),s("p",[t._v("可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。")]),t._v(" "),s("p",[t._v("基于上面对最左前缀索引的说明，我们来讨论一个问题："),s("strong",[t._v("在建立联合索引的时候，如何安排索引内的字段顺序。")])]),t._v(" "),s("p",[t._v("这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，"),s("strong",[t._v("第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。")])]),t._v(" "),s("p",[t._v("所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。")]),t._v(" "),s("p",[t._v("那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。")]),t._v(" "),s("p",[t._v("这时候，我们要"),s("strong",[t._v("考虑的原则就是空间")]),t._v("了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。")]),t._v(" "),s("h2",{attrs:{id:"索引下推"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引下推"}},[t._v("#")]),t._v(" 索引下推")]),t._v(" "),s("p",[t._v("上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？")]),t._v(" "),s("p",[t._v("我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tuser "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张 %'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" ismale"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。")]),t._v(" "),s("p",[t._v("然后呢？")]),t._v(" "),s("p",[t._v("当然是判断其他条件是否满足。")]),t._v(" "),s("p",[t._v("在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。")]),t._v(" "),s("p",[t._v("而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。")]),t._v(" "),s("p",[t._v("图 3 和图 4，是这两个过程的执行流程图。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(433),alt:"img"}})]),t._v(" "),s("p",[t._v("图 3 无索引下推执行流程")]),t._v(" "),s("p",[s("img",{attrs:{src:a(434),alt:"img"}})]),t._v(" "),s("p",[t._v("图 4 索引下推执行流程")]),t._v(" "),s("p",[t._v("在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。")]),t._v(" "),s("p",[t._v("图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。")]),t._v(" "),s("p",[t._v("图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。")]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("今天这篇文章，我和你继续讨论了数据库索引的概念，包括了覆盖索引、前缀索引、索引下推。你可以看到，在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标。")]),t._v(" "),s("p",[t._v("接下来我给你留下一个问题吧。")]),t._v(" "),s("p",[t._v("实际上主键索引也是可以使用多个字段的。DBA 小吕在入职新公司的时候，就发现自己接手维护的库里面，有这么一个表，表结构定义类似这样的：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("CREATE TABLE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`geek`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`a`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NOT NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`b`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NOT NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`c`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NOT NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`d`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NOT NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  PRIMARY KEY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`a`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`b`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  KEY "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`c`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`c`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  KEY "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`ca`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`c`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`a`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  KEY "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`cb`")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`c`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`b`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ENGINE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("InnoDB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("公司的同事告诉他说，由于历史原因，这个表需要 a、b 做联合主键，这个小吕理解了。")]),t._v(" "),s("p",[t._v("但是，学过本章内容的小吕又纳闷了，既然主键包含了 a、b 这两个字段，那意味着单独在字段 c 上创建一个索引，就已经包含了三个字段了呀，为什么要创建“ca”“cb”这两个索引？")]),t._v(" "),s("p",[t._v("同事告诉他，是因为他们的业务里面有这样的两种语句：")]),t._v(" "),s("div",{staticClass:"language-vbnet extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vbnet"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" from geek where c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("N order by a limit "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" from geek where c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("N order by b limit "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我给你的问题是，这位同事的解释对吗，为了这两个查询模式，这两个索引是否都是必须的？为什么呢？")]),t._v(" "),s("p",[t._v("你可以把你的思考和观点写在留言区里，我会在下一篇文章的末尾和你讨论这个问题。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。")]),t._v(" "),s("h2",{attrs:{id:"上期问题时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上期问题时间"}},[t._v("#")]),t._v(" 上期问题时间")]),t._v(" "),s("p",[t._v("上期的问题是，通过两个 alter 语句重建索引 k，以及通过两个 alter 语句重建主键索引是否合理。")]),t._v(" "),s("p",[t._v("在评论区，有同学问到为什么要重建索引。我们文章里面有提到，索引可能因为删除，或者页分裂等原因，导致数据页有空洞，重建索引的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。")]),t._v(" "),s("p",[t._v("这道题目，我给你的“参考答案”是：")]),t._v(" "),s("p",[t._v("重建索引 k 的做法是合理的，可以达到省空间的目的。但是，重建主键的过程不合理。不论是删除主键还是创建主键，都会将整个表重建。所以连着执行这两个语句的话，第一个语句就白做了。这两个语句，你可以用这个语句代替 ： alter table T engine=InnoDB。在专栏的第 12 篇文章《为什么表数据删掉一半，表文件大小不变？》中，我会和你分析这条语句的执行流程。")])])}),[],!1,null,null,null);s.default=r.exports}}]);